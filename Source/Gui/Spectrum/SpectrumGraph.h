#ifndef __SPECTGRAPH_H__
#define __SPECTGRAPH_H__

#include <Source/Framework/Wnd.h>
#include <Source/Core/Settings.h>
#include <Source/Gui/Oscilloscope/Graph.h>
#include <string.h>

static const ui16 arrHannWindow[512] = {
  0x0000, 0x0000, 0x0002, 0x0005, 0x0009, 0x000f, 0x0016, 0x001e, 0x0027, 0x0032, 0x003d, 0x004a, 0x0058, 0x0068, 0x0079, 0x008a, 0x009e, 0x00b2, 0x00c8, 0x00de, 0x00f6, 0x0110, 0x012a, 0x0146, 0x0163, 0x0181, 0x01a0, 0x01c1, 0x01e3, 0x0206, 0x022a, 0x0250, 
  0x0276, 0x029e, 0x02c7, 0x02f2, 0x031d, 0x034a, 0x0378, 0x03a7, 0x03d7, 0x0409, 0x043c, 0x0470, 0x04a5, 0x04db, 0x0513, 0x054b, 0x0585, 0x05c0, 0x05fd, 0x063a, 0x0679, 0x06b8, 0x06f9, 0x073b, 0x077f, 0x07c3, 0x0809, 0x084f, 0x0897, 0x08e0, 0x092b, 0x0976, 
  0x09c3, 0x0a10, 0x0a5f, 0x0aaf, 0x0b00, 0x0b52, 0x0ba6, 0x0bfa, 0x0c50, 0x0ca6, 0x0cfe, 0x0d57, 0x0db1, 0x0e0c, 0x0e68, 0x0ec6, 0x0f24, 0x0f84, 0x0fe4, 0x1046, 0x10a9, 0x110c, 0x1171, 0x11d7, 0x123e, 0x12a6, 0x1310, 0x137a, 0x13e5, 0x1451, 0x14bf, 0x152d, 
  0x159c, 0x160d, 0x167e, 0x16f1, 0x1764, 0x17d9, 0x184e, 0x18c5, 0x193c, 0x19b5, 0x1a2e, 0x1aa8, 0x1b24, 0x1ba0, 0x1c1e, 0x1c9c, 0x1d1b, 0x1d9c, 0x1e1d, 0x1e9f, 0x1f22, 0x1fa6, 0x202b, 0x20b1, 0x2138, 0x21bf, 0x2248, 0x22d2, 0x235c, 0x23e7, 0x2474, 0x2501, 
  0x258f, 0x261e, 0x26ad, 0x273e, 0x27cf, 0x2862, 0x28f5, 0x2989, 0x2a1e, 0x2ab3, 0x2b4a, 0x2be1, 0x2c79, 0x2d12, 0x2dac, 0x2e46, 0x2ee1, 0x2f7d, 0x301a, 0x30b8, 0x3156, 0x31f5, 0x3295, 0x3336, 0x33d7, 0x347a, 0x351c, 0x35c0, 0x3664, 0x3709, 0x37af, 0x3855, 
  0x38fd, 0x39a4, 0x3a4d, 0x3af6, 0x3ba0, 0x3c4a, 0x3cf5, 0x3da1, 0x3e4d, 0x3efb, 0x3fa8, 0x4056, 0x4105, 0x41b5, 0x4265, 0x4316, 0x43c7, 0x4479, 0x452b, 0x45de, 0x4692, 0x4746, 0x47fb, 0x48b0, 0x4966, 0x4a1c, 0x4ad3, 0x4b8a, 0x4c42, 0x4cfa, 0x4db3, 0x4e6d, 
  0x4f26, 0x4fe1, 0x509b, 0x5156, 0x5212, 0x52ce, 0x538b, 0x5448, 0x5505, 0x55c3, 0x5681, 0x5740, 0x57ff, 0x58be, 0x597e, 0x5a3e, 0x5afe, 0x5bbf, 0x5c80, 0x5d42, 0x5e04, 0x5ec6, 0x5f88, 0x604b, 0x610e, 0x61d2, 0x6295, 0x635a, 0x641e, 0x64e2, 0x65a7, 0x666c, 
  0x6732, 0x67f7, 0x68bd, 0x6983, 0x6a49, 0x6b10, 0x6bd6, 0x6c9d, 0x6d64, 0x6e2b, 0x6ef3, 0x6fba, 0x7082, 0x714a, 0x7212, 0x72da, 0x73a2, 0x746b, 0x7533, 0x75fc, 0x76c4, 0x778d, 0x7856, 0x791f, 0x79e8, 0x7ab1, 0x7b7a, 0x7c43, 0x7d0c, 0x7dd6, 0x7e9f, 0x7f68, 
  0x8031, 0x80fb, 0x81c4, 0x828d, 0x8356, 0x841f, 0x84e9, 0x85b2, 0x867b, 0x8744, 0x880d, 0x88d5, 0x899e, 0x8a67, 0x8b2f, 0x8bf8, 0x8cc0, 0x8d88, 0x8e50, 0x8f18, 0x8fe0, 0x90a8, 0x916f, 0x9236, 0x92fd, 0x93c4, 0x948b, 0x9552, 0x9618, 0x96de, 0x97a4, 0x986a, 
  0x992f, 0x99f4, 0x9ab9, 0x9b7e, 0x9c42, 0x9d07, 0x9dca, 0x9e8e, 0x9f51, 0xa014, 0xa0d7, 0xa199, 0xa25b, 0xa31d, 0xa3de, 0xa49f, 0xa560, 0xa620, 0xa6e0, 0xa7a0, 0xa85f, 0xa91e, 0xa9dc, 0xaa9a, 0xab58, 0xac15, 0xacd2, 0xad8e, 0xae4a, 0xaf05, 0xafc0, 0xb07b, 
  0xb135, 0xb1ee, 0xb2a7, 0xb360, 0xb418, 0xb4d0, 0xb587, 0xb63d, 0xb6f3, 0xb7a9, 0xb85e, 0xb912, 0xb9c6, 0xba79, 0xbb2c, 0xbbde, 0xbc90, 0xbd41, 0xbdf1, 0xbea1, 0xbf50, 0xbfff, 0xc0ad, 0xc15a, 0xc207, 0xc2b3, 0xc35e, 0xc409, 0xc4b3, 0xc55d, 0xc606, 0xc6ae, 
  0xc755, 0xc7fc, 0xc8a2, 0xc947, 0xc9ec, 0xca90, 0xcb33, 0xcbd6, 0xcc77, 0xcd18, 0xcdb9, 0xce58, 0xcef7, 0xcf95, 0xd032, 0xd0cf, 0xd16a, 0xd205, 0xd29f, 0xd339, 0xd3d1, 0xd469, 0xd500, 0xd596, 0xd62b, 0xd6bf, 0xd753, 0xd7e6, 0xd878, 0xd909, 0xd999, 0xda28, 
  0xdab6, 0xdb44, 0xdbd1, 0xdc5c, 0xdce7, 0xdd71, 0xddfa, 0xde83, 0xdf0a, 0xdf90, 0xe016, 0xe09a, 0xe11e, 0xe1a0, 0xe222, 0xe2a3, 0xe322, 0xe3a1, 0xe41f, 0xe49c, 0xe518, 0xe593, 0xe60d, 0xe686, 0xe6fe, 0xe775, 0xe7eb, 0xe860, 0xe8d4, 0xe947, 0xe9b9, 0xea2a, 
  0xea9a, 0xeb08, 0xeb76, 0xebe3, 0xec4f, 0xecba, 0xed23, 0xed8c, 0xedf3, 0xee5a, 0xeebf, 0xef24, 0xef87, 0xefe9, 0xf04a, 0xf0aa, 0xf109, 0xf167, 0xf1c4, 0xf220, 0xf27a, 0xf2d4, 0xf32c, 0xf383, 0xf3d9, 0xf42e, 0xf482, 0xf4d5, 0xf527, 0xf577, 0xf5c6, 0xf615, 
  0xf662, 0xf6ae, 0xf6f9, 0xf742, 0xf78b, 0xf7d2, 0xf818, 0xf85d, 0xf8a1, 0xf8e4, 0xf925, 0xf966, 0xf9a5, 0xf9e3, 0xfa20, 0xfa5b, 0xfa96, 0xfacf, 0xfb07, 0xfb3e, 0xfb74, 0xfba8, 0xfbdc, 0xfc0e, 0xfc3f, 0xfc6f, 0xfc9d, 0xfccb, 0xfcf7, 0xfd22, 0xfd4b, 0xfd74, 
  0xfd9b, 0xfdc1, 0xfde6, 0xfe0a, 0xfe2c, 0xfe4d, 0xfe6d, 0xfe8c, 0xfeaa, 0xfec6, 0xfee1, 0xfefb, 0xff14, 0xff2b, 0xff41, 0xff56, 0xff6a, 0xff7d, 0xff8e, 0xff9e, 0xffad, 0xffba, 0xffc7, 0xffd2, 0xffdc, 0xffe4, 0xffec, 0xfff2, 0xfff7, 0xfffb, 0xfffd, 0xfffe
};

class CWndSpectrumGraph : public CWndGraph
{
public:
	void _PrepareColumn( ui16 *column, ui16 n, ui16 clr )
	{
		memset( column, clr, DivsY*BlkY*2 );
		if ( n == 0 )
			return;
		if ( (n % BlkX) == 0)
		{
			for (ui16 y=5; y<DivsY*BlkY; y += 5)
				column[y] = RGB565(808080);
		} else
		if ( (n%6) == 0 )
		{
			for (ui16 y=BlkY; y<DivsY*BlkY-1; y += BlkY)
				column[y] = RGB565(808080);
		}
	}

	virtual void OnPaint()
	{
		si16 arrBufferIn[1024*2];
		si16 arrBufferOut[1024*2];
		ui16 column[CWndGraph::DivsY*CWndGraph::BlkY];
		ui8 arrDisplay[DivsX*BlkX];

		if ( !CWnd::m_rcOverlay.IsValid() )
		{
			CRect rc = m_rcClient;
			rc.Inflate( 1, 1, 1, 1 );
			BIOS::LCD::Rectangle( rc, RGB565(b0b0b0) );
		}

		if ( !BIOS::ADC::Ready() ) 
			return;

		ui16 i, x;
		ui16 clr1 = Settings.CH1.u16Color;
		ui8 en1 = Settings.CH1.Enabled == CSettings::AnalogChannel::_YES;
		ui16 clr2 = Settings.CH1.u16Color;
		ui8 en2 = Settings.CH1.Enabled == CSettings::AnalogChannel::_YES;

		ui16 clr = 0;
		if ( en1 )
			clr = clr1;
		if ( en2 )
			clr = clr2;

		memset( arrDisplay, 0, sizeof(arrDisplay) );
		if ( en1 || en2 )
		{
//			BIOS::ADC::Restart();
			for(x=0; x<4096; x++)
			{
				ui32 data = BIOS::ADC::Get();
				ui8 val = en1 ? (data & 0xff) : ((data>>8) & 0xff); // CH1
				if ( x < 1024 )
				{
					arrBufferIn[x<<1] = val<<8;
					arrBufferIn[(x<<1)|1] = 0;
				}
			}
 	
			BIOS::FFT::Window(arrBufferIn, arrHannWindow, 1024);
			BIOS::FFT::Convert(arrBufferOut, arrBufferIn, 1024);
 	
			memset( arrDisplay, 0, sizeof(arrDisplay) );
 	
			for(x=0; x<1024; x+=2)
			{
				int val = BIOS::FFT::Sqrt(arrBufferOut[x]*arrBufferOut[x]+arrBufferOut[x+1]*arrBufferOut[x+1])>>2;
				if (val < 0) val = 0;
				if (val >= 200) val = 199;
 	
				int nDispX = x*(DivsX*BlkX)/1024;
				arrDisplay[nDispX] = max(arrDisplay[nDispX], val);
			}
		}


		for (i=0; i<DivsX*BlkX; i++)
		{
			_PrepareColumn( column, i, 0 );

			for ( int t = 0; t < arrDisplay[i]; t++ )
				column[t] = clr;

			BIOS::LCD::Buffer( m_rcClient.left + i, m_rcClient.top, column, DivsY*BlkY );
		}
	}
};

#endif